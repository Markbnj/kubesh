#!/usr/bin/env bash

# Copyright 2017 Mark Betz.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -ueo pipefail

export kubesh_version="0.3.1"

#
# Only called when the -h options is passed on the command line, not really
# anything to put here yet but it's possible there might be down the road.
#
function __cli_help {
cat << EOF
NAME
  kubesh ${kubesh_version} - sets up a shell environment for kubernetes
  kubectl tool with several convenient context management functions.

SYNOPSIS
  kubesh [-h] [-i] [-p]

DESCRIPTION
  Kubesh displays the current kubernetes context in the shell prompt and adds
  some commands to make it easier to switch between contexts. Run kubesh and
  type 'help' at the shell prompt for more information on commands.

OPTIONAL ARGUMENTS
  -h
    Display this help. All other arguments are ignored.
  -i
    Do not attempt to use inotifywait (if installed) to monitor changes to the
    kubectl config files.
  -p
    Start with the context prompt disabled. The current context can be shown
    by typing 'context' at the shell prompt.

EOF
  if [ -z "${1-}" ]; then
    exit 0
  else
    exit $1
  fi
}

#
# Called when the 'help context' command is entered, simply prints out the
# list of available commands for contexts.
#
function __print_context_commands {
cat << EOF

kubesh ${kubesh_version} - kubernetes/kubectl shell environment

context [CONTEXT|SUBCOMMAND]

When given without arguments displays the current context. If a valid context
name or unique fragment is supplied switches to that context. Any other
argument is interpreted as a subcommand. The following subcommands are
available for contexts:

  list
    Display the list of available contexts from the kubectl
    config

  select
    Switch to another context by selecting from a list of all
    contexts in the config.

EOF
}

#
# Called when the 'help prompt' command is entered, simply prints out the
# list of available commands for prompt control.
#
function __print_prompt_commands {
cat << EOF

kubesh ${kubesh_version} - kubernetes/kubectl shell environment

prompt [SUBCOMMAND]

Enables control over the display of context information in the shell prompt.

  on
    Turn on display of context information in the shell prompt. This is the
    default.

  off
    Turn off display of context information in the shell prompt.

EOF
}

#
# Called when the 'help' command is entered, simply prints out the
# list of available commands.
#
function __print_commands {
cat << EOF

kubesh ${kubesh_version} - kubernetes/kubectl shell environment

The following commands are available:

  context [CONTEXT|SUBCOMMAND]
    List and select available cluster contexts, or print the current context.

  prompt [SUBCOMMAND]
    Enables/disables display of the current kubernetes context in the shell
    prompt.

  help [TOPIC]
    Show help for the kubesh environment. When given without arguments the
    command displays this message. When given with a topic keyword displays
    help for that topic. The following topics are available:

    context - help for context commands
    bash - help for bash commands

    Any unrecognized help topic is passed through to bash help.

EOF
}

#
# Implements the help command. Recognized topics invoke one of the functions
# above to print out help for that topic. Unrecognized topics are passed to
# the bash builtin help system. The special topic "help bash" invokes the
# builtin help with no arguments.
#
function help {
  if [ -z "${1}" ]; then
      __print_commands
  else
    shopt -s nocasematch
    case "$1" in
      "context")
        __print_context_commands
        ;;
      "prompt")
        __print_prompt_commands
        ;;
      "bash")
        builtin help
        ;;
      *)
        builtin help $1
        ;;
    esac
    shopt -u nocasematch
  fi
}

#
# Turns the display of context information in the shell prompt on or off
# based on the current state of $prompt_on
#
function __prompt_set {
  if $prompt_on; then
    PS1="(${active_context}) $old_prompt"
  else
    PS1="$old_prompt"
  fi
}

#
# Implements the prompt command. The prompt command format is:
#   prompt [SUBCOMMAND]
# where SUBCOMMAND is on of the available subcommands.
#
function prompt {
  if [ -z "${1}" ]; then
    if $prompt_on; then
      prompt_on=false
      __prompt_set
    else
      prompt_on=true
      __prompt_set
    fi
  else
    shopt -s nocasematch
    case "$1" in
      "on")
        prompt_on=true
        __prompt_set
        ;;
      "off")
        prompt_on=false
        __prompt_set
        ;;
      *)
        echo "Error: unrecognized subcommand $1"
        __print_prompt_commands
        ;;
    esac
    shopt -u nocasematch
  fi
}

#
# Responsible for parsing contexts out of the output from 'kubectl config view'.
# After this runs the global 'contexts' is an array of strings representing
# serialized associative arrays, one per context.
#
function __parse_contexts {
  unset contexts
  declare -a -g contexts
  declare -A context
  local old_ifs=$IFS
  IFS=$'\n'
  for l in $(kubectl config view | sed -n '/- context/,/name:/ p'); do
    if [ "$l" == "- context:" ]; then
      if [ ${#context[@]} -gt 0 ]; then
        contexts=("${contexts[@]}" "$(declare -p context)")
        unset context
        declare -A context
      fi
    else
      local trim_l=$(echo -n $l | sed 's/^ *//g')
      if [ "${trim_l:0:8}" == "cluster:" ]; then
        context["cluster"]=${trim_l:9}
      elif [ "${trim_l:0:5}" == "name:" ]; then
        context["name"]=${trim_l:6}
      fi
    fi
  done
  contexts=("${contexts[@]}" "$(declare -p context)")
  IFS=$old_ifs
}

#
# Calls __parse_contexts and then displays the list of contexts. Note
# how the function deserializes the associative arrays stored in the
# global 'contexts'. Called by both the 'context select' and 'context
# list' commands.
#
function __print_context_list {
  local old_ifs=$IFS
  local current_context=$(kubectl config current-context)
  __parse_contexts
  printf '%-3s %-2s %-45s %-45s\n' "#" "" "NAME" "CLUSTER"
  IFS=$'\n'
  for ((i=0;i<${#contexts[@]};i++)); do
    local context_str=${contexts[i]}
    eval "$context_str"
    local active=""
    if [ "${current_context}" == "${context["name"]}" ]; then
      active=" *"
    fi
    printf '%-3s %-2s %-45s %-45s\n' $((${i}+1)) "${active}" ${context["name"]} ${context["cluster"]}
  done
  printf "\n"
  IFS=$old_ifs
}

#
# Prints the current active context
#
function __print_context {
  echo $(kubectl config current-context)
}

#
# Switches to a new context and updates the prompt. Expects the context
# name in $1
#
function __switch_context {
  if $inotify; then
    touch ${tempdir}/.kubesh_config_changing
  fi
  kubectl config use-context $1
  active_context=$(kubectl config current-context)
  __prompt_set
}

#
# Searches for a context name by globbing a fragment passed in $1. If
# a match is found the global 'selected_context' is set on exit.
#
function __search_context {
  __parse_contexts
  local old_ifs=$IFS
  IFS=$'\n'
  for context_str in ${contexts[@]}; do
    eval "$context_str"
    if [[ ${context["name"]} == *"$1"* ]]; then
      selected_context=${context["name"]}
      break
    fi
  done
  IFS=$old_ifs
}

#
# Displays the list of available contexts and prompts the user to select one
# by ordinal.
#
function __select_context {
  __print_context_list
  read -s -N 1 -p "Select context: " choice
  printf "\n"
  local err_msg="Error: choice must be an integer in the range 1..${#contexts[@]}"
  case $choice in
    ''|*[!0-9]*)
      echo $err_msg
      ;;
    *)
      if [ $choice -gt ${#contexts[@]} ]; then
        echo $err_msg
      else
        local context_str=${contexts[(($choice-1))]}
        eval "$context_str"
        selected_context=${context["name"]}
      fi
      ;;
  esac
}

#
# Implements the context command. The context command format is:
#   context [CONTEXT|SUBCOMMAND]
# where CONTEXT is a context name or fragment of a name, and
# SUBCOMMAND is one of the available context commands.
function context {
  if [ -z "${1}" ]; then
      __print_context
  else
    shopt -s nocasematch
    case "$1" in
      "list")
        __print_context_list
        ;;
      "select")
        __select_context
        if [ ! -z "${selected_context}" ]; then
          __switch_context ${selected_context}
        fi
        selected_context=
        ;;
      *)
        __search_context $1
        if [ ! -z "${selected_context}" ]; then
          __switch_context ${selected_context}
        fi
        selected_context=
        ;;
    esac
    shopt -u nocasematch
  fi
}

#
# When the inotifywait command is available this function is called if
# the kubectl config is changed outside the shell
#
function __on_config_changed {
  if [ ! -f ${tempdir}/.kubesh_config_changing ]; then
    current_context=$(kubectl config current-context 2>&1)
    if [ "$current_context" != "$active_context" ]; then
      active_context=$current_context
      kill -n 14 $$
    fi
  else
    rm ${tempdir}/.kubesh_config_changing
    active_context=$(kubectl config current-context 2>&1)
  fi
}

#
# Enforce the minimum bash version
#
if (( ${BASH_VERSION%%.*} < 4 )); then
  echo "Error: kubesh requires bash version 4+. Your bash version: ${BASH_VERSION}"
  exit 1
fi

#
# Let's not run inside ourself
#
set +u
if [ ! -z "$kubesh_pid" ]; then
  echo "Error: kubesh is already running"
  exit 1
fi
set -u
export kubesh_pid=$$

#
# Check to make sure necessary commands are installed.
#
if ! command -v kubectl > /dev/null 2>&1; then
  echo "Error: kubesh requires kubectl (https://kubernetes.io/docs/tasks/kubectl/install/)"
  exit 1
fi
if ! command -v sed > /dev/null 2>&1; then
  echo "Error: kubesh requires the sed program (https://www.gnu.org/software/sed/manual/sed.html)"
  exit 1
fi

#
# These exports maintain state that is needed in the child shell
#
export tempdir=${TMPDIR-/tmp}
export active_context
export prompt_on=true
export use_inotify=true
export kubesh_welcome="kubesh ${kubesh_version} (type 'help' for more information)"

#
# Handle the few command line args.
#
while getopts hip opt; do
  case $opt in
    h)
      __cli_help
      ;;
    i)
      use_inotify=false
      ;;
    p)
      prompt_on=false
      ;;
    *)
      echo "Error: Unknown option '${opt}'"
      cli_help 1
      ;;
  esac
done

#
# Determines below whether we can watch the kubectl config for changes.
#
export inotify=false
if $use_inotify; then
  if command -v inotifywait > /dev/null 2>&1; then
    inotify=true
    export restart=false
    trap "restart=true" 14
  fi
fi

#
# These have to be exported so they are available to be called when commands are
# run from the exec'd shell
#
export -f __parse_contexts
export -f __print_context_list
export -f __print_context
export -f __switch_context
export -f __search_context
export -f __select_context
export -f __prompt_set
export -f __print_context_commands
export -f __print_prompt_commands
export -f __print_commands
export -f __on_config_changed

#
# Exports of available command functions
#
export -f help
export -f prompt
export -f context

while true; do
  set +e
  current_context=$(kubectl config current-context 2>&1)
  if [ $? != 0 ]; then
    echo "Error: couldn't read current kubectl context (do you have one?)"
    exit 1
  fi
  set -e
  active_context=$current_context
  restart=false
  bash --init-file <(cat << 'EOF'
    if [ -f ~/.bashrc ]; then
      . ~/.bashrc
    fi
    if [ -z "$KUBECONFIG" ]; then
      export kube_config_files=("${HOME}/.kube/config")
    else
      export kube_config_files=($(echo "$KUBECONFIG" | awk -F: -v OFS="\n" '$1=$1'))
    fi
    export old_prompt=$PS1
    echo ${kubesh_welcome}
    if $prompt_on; then
      PS1="(${active_context}) $old_prompt"
    fi
    if ! $inotify; then
      if ! $use_inotify; then
        echo "Warning: inotifywait is disabled; changes to the kubectl context made"
        echo "outside kubesh will not be noticed by the shell."
      else
        echo "Warning: inotifywait not installed; changes to the kubectl context made"
        echo "outside kubesh will not be noticed by the shell. Install the inotify-tools"
        echo "package then restart kubesh if you want the shell to pick up changes."
      fi
    else
      { coproc config_watch {
        while true; do
          inotifywait --quiet --event modify,move_self,delete_self ${kube_config_files[@]} >/dev/null &
          trap "kill $!; break" 1 2 3 6 15
          wait $!
          if [ $? != 0 ]; then
            trap - 1 2 3 6 15
            echo "Warning: inotifywait failed; changes to kube config are not monitored."
            break
          fi
          trap - 1 2 3 6 15
          __on_config_changed
        done
      } >&3; } 3>&1
      trap "if kill -0 $config_watch_PID >/dev/null 2>&1; then kill $config_watch_PID; fi" 0 1 2 3 6 15

      # the posix alarm clock signal (14) gets handled immediately whereas
      # USR1 doesn't get handled until return is pressed
      trap "kill -n 14 $PPID; exit" 14
    fi
    printf "\n"
EOF
  )
  if ! $restart; then
    break
  else
    printf '\nWarning: kubectl config changed; restarting kubesh\n'
  fi
done

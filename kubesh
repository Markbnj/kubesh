#!/usr/bin/env bash

# Copyright 2014 Mark Betz.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -ueo pipefail

function __cli_help {
cat << EOF
NAME
  kubesh - sets up a shell environment for kubernetes\' kubectl tool with a
  number of useful commands

SYNOPSIS
  kubesh

DESCRIPTION
  The kubesh script creates several functions that implement commands and
  execs a child shell with a prompt that makes it clear which kube context
  is currently active. Commands are available to list and select from the
  available contexts, making switching back and forth very easy.

OPTIONAL ARGUMENTS
  -h
    Display this help. All other arguments are ignored.

EOF
  if [ -z "${1-}" ]; then
    exit 0
  else
    exit $1
  fi
}

function __print_context_commands {
cat << EOF
context [CONTEXT|SUBCOMMAND]

When given without arguments displays the current context. If a valid context
name or unique fragment is supplied switches to that context. Any other
argument is interpreted as a subcommand. The following subcommands are
available for contexts:

  list
    Display the list of available contexts from the kubectl
    config

  select
    Switch to another context by selecting from a list of all
    contexts in the config.

EOF
}

function __parse_contexts {
  unset contexts
  declare -a -g contexts
  declare -A context
  local old_ifs=$IFS
  IFS=$'\n'
  for l in $(kubectl config view | sed -n '/- context/,/name:/ p'); do
    if [ "$l" == "- context:" ]; then
      if [ ${#context[@]} -gt 0 ]; then
        contexts=("${contexts[@]}" "$(declare -p context)")
        unset context
        declare -A context
      fi
    else
      local trim_l=$(echo -n $l | sed 's/^ *//g')
      if [ "${trim_l:0:8}" == "cluster:" ]; then
        context["cluster"]=${trim_l:9}
      elif [ "${trim_l:0:5}" == "name:" ]; then
        context["name"]=${trim_l:6}
      fi
    fi
  done
  contexts=("${contexts[@]}" "$(declare -p context)")
  IFS=$old_ifs
}

function __print_context_list {
  local old_ifs=$IFS
  local current_context=$(kubectl config current-context)
  __parse_contexts
  printf '%-3s %-2s %-45s %-45s\n' "#" "" "NAME" "CLUSTER"
  IFS=$'\n'
  for ((i=0;i<${#contexts[@]};i++)); do
    local context_str=${contexts[i]}
    eval "$context_str"
    local active=""
    if [ "${current_context}" == "${context["name"]}" ]; then
      active=" *"
    fi
    printf '%-3s %-2s %-45s %-45s\n' $((${i}+1)) "${active}" ${context["name"]} ${context["cluster"]}
  done
  IFS=$old_ifs
}

function __print_context {
  echo $(kubectl config current-context)
}

function __switch_context {
  kubectl config use-context $1
  active_context=$(kubectl config current-context)
  PS1="(${active_context}) $old_prompt"
}

function __search_context {
  __parse_contexts
  local old_ifs=$IFS
  IFS=$'\n'
  for context_str in ${contexts[@]}; do
    eval "$context_str"
    if [[ ${context["name"]} == *"$1"* ]]; then
      selected_context=${context["name"]}
      break
    fi
  done
  IFS=$old_ifs
}

function __select_context {
  __print_context_list
  read -s -N 1 -p "Select context: " choice
  printf "\n"
  local err_msg="ERROR: choice must be an integer in the range 1..${#contexts[@]}"
  case $choice in
    ''|*[!0-9]*)
      echo $err_msg
      ;;
    *)
      if [ $choice -gt ${#contexts[@]} ]; then
        echo $err_msg
      else
        local context_str=${contexts[(($choice-1))]}
        eval "$context_str"
        selected_context=${context["name"]}
      fi
      ;;
  esac
}

function context {
  if [ -z "${1}" ]; then
      __print_context
  else
    shopt -s nocasematch
    case "$1" in
      "list")
        __print_context_list
        ;;
      "select")
        __select_context
        if [ ! -z "${selected_context}" ]; then
          __switch_context ${selected_context}
        fi
        selected_context=
        ;;
      *)
        __search_context $1
        if [ ! -z "${selected_context}" ]; then
          __switch_context ${selected_context}
        fi
        selected_context=
        ;;
    esac
    shopt -u nocasematch
  fi
}

function __print_commands {
cat << EOF
The following commands are available:

  context [CONTEXT|SUBCOMMAND]
    List and select available cluster contexts, or print the current context.

  help [TOPIC]
    Show help for the kubesh environment. When given without arguments the
    command displays this message. When given with a topic keyword displays
    help for that topic. The following topics are available:

    context - help for context commands
    bash - help for bash commands

    Any unrecognized help topic is passed through to bash help.

EOF
}

function help {
  if [ -z "${1}" ]; then
      __print_commands
  else
    shopt -s nocasematch
    case "$1" in
      "context")
        __print_context_commands
        ;;
      "bash")
        builtin help
        ;;
      *)
        builtin help $1
        ;;
    esac
    shopt -u nocasematch
  fi
}

while getopts h opt; do
  case $opt in
    h)
      __cli_help
      ;;
    *)
      echo "ERROR: Unknown option '${opt}'"
      cli_help 1
      ;;
  esac
done

if [ -z "$(which kubectl)" ]; then
  echo "ERROR: kubesh requires kubectl (https://kubernetes.io/docs/tasks/kubectl/install/)"
  exit 1
fi

export -f __print_context_commands
export -f __parse_contexts
export -f __print_context_list
export -f __print_context
export -f __switch_context
export -f __search_context
export -f __select_context
export -f __print_commands
export -f context
export -f help

export active_context="$(kubectl config current-context)"

exec bash --init-file <(echo 'export old_prompt=$PS1;PS1="(${active_context}) $old_prompt"')

#!/usr/bin/env bash
set -ueo pipefail

function cli_help {
cat << EOF
NAME
  kubesh - sets up a shell environment for kubernetes\' kubectl tool
  with a number of useful commands

SYNOPSIS
  kubesh

DESCRIPTION

OPTIONAL ARGUMENTS
  -h
    Display this help. All other arguments are ignored.

POSITIONAL ARGUMENTS

EOF
  if [ -z "${1-}" ]; then
    exit 0
  else
    exit $1
  fi
}

function print_context_commands {
cat << EOF
context [CONTEXT|SUBCOMMAND]

When given without arguments displays the current context. If a valid context
name or unique fragment is supplied switches to that context. Any other
argument is interpreted as a subcommand. The following subcommands are
available for contexts:

  list
    Display the list of available contexts from the kubectl
    config

  select
    Switch to another context by selecting from a list of all
    contexts in the config.

EOF
}

function list_contexts {
   echo "$(kubectl config get-contexts)"
}

function print_context {
  echo $(kubectl config current-context)
}

function select_context {
  echo "select_context"
}

function context {
  if [ -z "${1}" ]; then
      print_context
  else
    shopt -s nocasematch
    case "$1" in
      "list")
        list_contexts
        ;;
      "select")
        select_context $2
        ;;
      *)
        echo "ERROR: Unknown subcommand '${1}'"
        print_context_commands
        ;;
    esac
    shopt -u nocasematch
  fi
}

function print_commands {
cat << EOF
The following commands are available:

  context [CONTEXT|SUBCOMMAND]
    List and select available cluster contexts, or print the current context.

  help [TOPIC]
    Show help for the kubesh environment. When given without arguments the
    command displays this message. When given with a topic keyword displays
    help for that topic. The following topics are available:

    context - help for context commands
    bash - help for bash commands

    Any unrecognized help topic is passed through to bash help.

EOF
}

function help {
  if [ -z "${1}" ]; then
      print_commands
  else
    shopt -s nocasematch
    case "$1" in
      "context")
        print_context_commands
        ;;
      "bash")
        builtin help
        ;;
      *)
        builtin help $1
        ;;
    esac
    shopt -u nocasematch
  fi
}

while getopts h opt; do
  case $opt in
    h)
      cli_help
      ;;
    *)
      echo "ERROR: Unknown option '${opt}'"
      cli_help 1
      ;;
  esac
done

if [ -z "$(which kubectl)" ]; then
  echo "ERROR: this script requires kubectl"
  exit 1
fi

export -f print_context_commands
export -f list_contexts
export -f print_context
export -f select_context
export -f context
export -f print_commands
export -f help

bash
